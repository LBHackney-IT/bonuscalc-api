// <auto-generated />
using System;
using BonusCalcApi.V1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace V1.Infrastructure.Migrations
{
    [DbContext(typeof(BonusCalcContext))]
    [Migration("20220816052146_UpdateCreateOperativeStoredProcedure")]
    partial class UpdateCreateOperativeStoredProcedure
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "band_change_decision", new[] { "approved", "rejected" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.BandChange", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("id");

                    b.Property<decimal>("BalanceDuration")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("balance_duration")
                        .HasComputedColumnSql("ROUND(GREATEST(LEAST(max_value * utilisation, total_value * (NOT fixed_band)::int) -  band_value * utilisation, 0) / 60, 4)", true);

                    b.Property<decimal>("BalanceValue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("balance_value")
                        .HasComputedColumnSql("GREATEST(LEAST(max_value * utilisation, total_value * (NOT fixed_band)::int) -  band_value * utilisation, 0)", true);

                    b.Property<decimal>("BandValue")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("band_value");

                    b.Property<string>("BonusPeriodId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("bonus_period_id");

                    b.Property<int?>("FinalBand")
                        .HasColumnType("integer")
                        .HasColumnName("final_band");

                    b.Property<bool>("FixedBand")
                        .HasColumnType("boolean")
                        .HasColumnName("fixed_band");

                    b.Property<decimal>("MaxValue")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("max_value");

                    b.Property<string>("OperativeId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("operative_id");

                    b.Property<int>("ProjectedBand")
                        .HasColumnType("integer")
                        .HasColumnName("projected_band");

                    b.Property<DateTime?>("ReportSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("report_sent_at");

                    b.Property<int>("SalaryBand")
                        .HasColumnType("integer")
                        .HasColumnName("salary_band");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("scheme");

                    b.Property<decimal>("SickDuration")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("sick_duration");

                    b.Property<decimal>("TotalValue")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("total_value");

                    b.Property<string>("Trade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("trade");

                    b.Property<decimal>("Utilisation")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("utilisation");

                    b.HasKey("Id")
                        .HasName("pk_band_changes");

                    b.HasIndex("BonusPeriodId")
                        .HasDatabaseName("ix_band_changes_bonus_period_id");

                    b.HasIndex("OperativeId")
                        .HasDatabaseName("ix_band_changes_operative_id");

                    b.ToTable("band_changes", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.BonusPeriod", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("closed_by");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_bonus_periods");

                    b.HasIndex("StartAt")
                        .IsUnique()
                        .HasDatabaseName("ix_bonus_periods_start_at");

                    b.HasIndex("Year", "Number")
                        .IsUnique()
                        .HasDatabaseName("ix_bonus_periods_year_number");

                    b.ToTable("bonus_periods", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Operative", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("id");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_address");

                    b.Property<bool>("FixedBand")
                        .HasColumnType("boolean")
                        .HasColumnName("fixed_band");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SalaryBand")
                        .HasColumnType("integer")
                        .HasColumnName("salary_band");

                    b.Property<int?>("SchemeId")
                        .HasColumnType("integer")
                        .HasColumnName("scheme_id");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Id", "Name", "TradeId", "Section" });

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("section");

                    b.Property<string>("SupervisorId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("supervisor_id");

                    b.Property<string>("TradeId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("trade_id");

                    b.Property<decimal>("Utilisation")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)")
                        .HasDefaultValue(1m)
                        .HasColumnName("utilisation");

                    b.HasKey("Id")
                        .HasName("pk_operatives");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasDatabaseName("ix_operatives_email_address");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_operatives_manager_id");

                    b.HasIndex("SchemeId")
                        .HasDatabaseName("ix_operatives_scheme_id");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("ix_operatives_search_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("SupervisorId")
                        .HasDatabaseName("ix_operatives_supervisor_id");

                    b.HasIndex("TradeId")
                        .HasDatabaseName("ix_operatives_trade_id");

                    b.ToTable("operatives", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.OperativeProjection", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("id");

                    b.Property<decimal>("BandValue")
                        .HasColumnType("numeric")
                        .HasColumnName("band_value");

                    b.Property<string>("BonusPeriodId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("bonus_period_id");

                    b.Property<bool>("FixedBand")
                        .HasColumnType("boolean")
                        .HasColumnName("fixed_band");

                    b.Property<string>("ManagerEmailAddress")
                        .HasColumnType("text")
                        .HasColumnName("manager_email_address");

                    b.Property<string>("ManagerName")
                        .HasColumnType("text")
                        .HasColumnName("manager_name");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("numeric")
                        .HasColumnName("max_value");

                    b.Property<string>("OperativeId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("operative_id");

                    b.Property<int>("ProjectedBand")
                        .HasColumnType("integer")
                        .HasColumnName("projected_band");

                    b.Property<int>("SalaryBand")
                        .HasColumnType("integer")
                        .HasColumnName("salary_band");

                    b.Property<string>("Scheme")
                        .HasColumnType("text")
                        .HasColumnName("scheme");

                    b.Property<decimal>("SickDuration")
                        .HasColumnType("numeric")
                        .HasColumnName("sick_duration");

                    b.Property<string>("SupervisorEmailAddress")
                        .HasColumnType("text")
                        .HasColumnName("supervisor_email_address");

                    b.Property<string>("SupervisorName")
                        .HasColumnType("text")
                        .HasColumnName("supervisor_name");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric")
                        .HasColumnName("total_value");

                    b.Property<string>("Trade")
                        .HasColumnType("text")
                        .HasColumnName("trade");

                    b.Property<decimal>("Utilisation")
                        .HasColumnType("numeric")
                        .HasColumnName("utilisation");

                    b.HasKey("Id")
                        .HasName("pk_operative_projections");

                    b.HasIndex("BonusPeriodId")
                        .HasDatabaseName("ix_operative_projections_bonus_period_id");

                    b.HasIndex("OperativeId")
                        .HasDatabaseName("ix_operative_projections_operative_id");

                    b.ToTable((string)null);

                    b.ToView("operative_projections");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.OperativeSummary", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("id");

                    b.Property<string>("WeekId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("week_id");

                    b.Property<decimal>("AverageUtilisation")
                        .HasColumnType("numeric")
                        .HasColumnName("average_utilisation");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("NonProductiveDuration")
                        .HasColumnType("numeric")
                        .HasColumnName("non_productive_duration");

                    b.Property<decimal>("NonProductiveValue")
                        .HasColumnType("numeric")
                        .HasColumnName("non_productive_value");

                    b.Property<decimal>("ProductiveValue")
                        .HasColumnType("numeric")
                        .HasColumnName("productive_value");

                    b.Property<decimal>("ProjectedValue")
                        .HasColumnType("numeric")
                        .HasColumnName("projected_value");

                    b.Property<DateTime?>("ReportSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("report_sent_at");

                    b.Property<int>("SchemeId")
                        .HasColumnType("integer")
                        .HasColumnName("scheme_id");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric")
                        .HasColumnName("total_value");

                    b.Property<string>("TradeDescription")
                        .HasColumnType("text")
                        .HasColumnName("trade_description");

                    b.Property<string>("TradeId")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("trade_id");

                    b.Property<decimal>("Utilisation")
                        .HasColumnType("numeric")
                        .HasColumnName("utilisation");

                    b.HasKey("Id", "WeekId");

                    b.HasIndex("WeekId")
                        .HasDatabaseName("ix_operative_summaries_week_id");

                    b.ToTable((string)null);

                    b.ToView("operative_summaries");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.OutOfHoursSummary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("WeekId")
                        .HasColumnType("text")
                        .HasColumnName("week_id");

                    b.Property<string>("CostCode")
                        .HasColumnType("text")
                        .HasColumnName("cost_code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric")
                        .HasColumnName("total_value");

                    b.Property<string>("TradeDescription")
                        .HasColumnType("text")
                        .HasColumnName("trade_description");

                    b.Property<string>("TradeId")
                        .HasColumnType("text")
                        .HasColumnName("trade_id");

                    b.HasKey("Id", "WeekId", "CostCode");

                    b.ToTable((string)null);

                    b.ToView("out_of_hours_summaries");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.OvertimeSummary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("WeekId")
                        .HasColumnType("text")
                        .HasColumnName("week_id");

                    b.Property<string>("CostCode")
                        .HasColumnType("text")
                        .HasColumnName("cost_code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric")
                        .HasColumnName("total_value");

                    b.Property<string>("TradeDescription")
                        .HasColumnType("text")
                        .HasColumnName("trade_description");

                    b.Property<string>("TradeId")
                        .HasColumnType("text")
                        .HasColumnName("trade_id");

                    b.HasKey("Id", "WeekId", "CostCode");

                    b.ToTable((string)null);

                    b.ToView("overtime_summaries");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.PayBand", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("Band")
                        .HasColumnType("integer")
                        .HasColumnName("band");

                    b.Property<int?>("SchemeId")
                        .HasColumnType("integer")
                        .HasColumnName("scheme_id");

                    b.Property<decimal>("SmvPerHour")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(20, 14)
                        .HasColumnType("numeric(20,14)")
                        .HasColumnName("smv_per_hour")
                        .HasComputedColumnSql("value / 36", true);

                    b.Property<decimal>("TotalValue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("total_value")
                        .HasComputedColumnSql("value * 13", true);

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_pay_bands");

                    b.HasIndex("SchemeId")
                        .HasDatabaseName("ix_pay_bands_scheme_id");

                    b.ToTable("pay_bands", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.PayElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("CostCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("cost_code");

                    b.Property<decimal>("Duration")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("duration");

                    b.Property<decimal>("Friday")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasDefaultValue(0m)
                        .HasColumnName("friday");

                    b.Property<decimal>("Monday")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasDefaultValue(0m)
                        .HasColumnName("monday");

                    b.Property<int>("PayElementTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("pay_element_type_id");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.Property<decimal>("Saturday")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasDefaultValue(0m)
                        .HasColumnName("saturday");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "WorkOrder", "Address" });

                    b.Property<decimal>("Sunday")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasDefaultValue(0m)
                        .HasColumnName("sunday");

                    b.Property<decimal>("Thursday")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasDefaultValue(0m)
                        .HasColumnName("thursday");

                    b.Property<string>("TimesheetId")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("timesheet_id");

                    b.Property<decimal>("Tuesday")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasDefaultValue(0m)
                        .HasColumnName("tuesday");

                    b.Property<decimal>("Value")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("value");

                    b.Property<decimal>("Wednesday")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasDefaultValue(0m)
                        .HasColumnName("wednesday");

                    b.Property<string>("WorkOrder")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("work_order");

                    b.HasKey("Id")
                        .HasName("pk_pay_elements");

                    b.HasIndex("CostCode")
                        .HasDatabaseName("ix_pay_elements_cost_code");

                    b.HasIndex("PayElementTypeId")
                        .HasDatabaseName("ix_pay_elements_pay_element_type_id");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("ix_pay_elements_search_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("TimesheetId")
                        .HasDatabaseName("ix_pay_elements_timesheet_id");

                    b.HasIndex("WorkOrder")
                        .HasDatabaseName("ix_pay_elements_work_order");

                    b.ToTable("pay_elements", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.PayElementType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool>("Adjustment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("adjustment");

                    b.Property<string>("CostCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("cost_code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<bool>("NonProductive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("non_productive");

                    b.Property<bool>("OutOfHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("out_of_hours");

                    b.Property<bool>("Overtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("overtime");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean")
                        .HasColumnName("paid");

                    b.Property<bool>("PayAtBand")
                        .HasColumnType("boolean")
                        .HasColumnName("pay_at_band");

                    b.Property<bool>("Productive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("productive");

                    b.Property<bool>("Selectable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("selectable");

                    b.Property<bool>("SickLeave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("sick_leave");

                    b.Property<int?>("SmvPerHour")
                        .HasColumnType("integer")
                        .HasColumnName("smv_per_hour");

                    b.HasKey("Id")
                        .HasName("pk_pay_element_types");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasDatabaseName("ix_pay_element_types_description");

                    b.ToTable("pay_element_types", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("id");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Scheme", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<decimal>("ConversionFactor")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(20, 14)
                        .HasColumnType("numeric(20,14)")
                        .HasDefaultValue(1m)
                        .HasColumnName("conversion_factor");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<decimal>("MaxValue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasDefaultValue(0m)
                        .HasColumnName("max_value");

                    b.Property<decimal>("MinValue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasDefaultValue(0m)
                        .HasColumnName("min_value");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_schemes");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasDatabaseName("ix_schemes_description");

                    b.ToTable("schemes", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Summary", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("id");

                    b.Property<string>("BonusPeriodId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("bonus_period_id");

                    b.Property<string>("OperativeId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("operative_id");

                    b.HasKey("Id")
                        .HasName("pk_summaries");

                    b.HasIndex("BonusPeriodId")
                        .HasDatabaseName("ix_summaries_bonus_period_id");

                    b.ToTable((string)null);

                    b.ToView("summaries");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Timesheet", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("id");

                    b.Property<string>("OperativeId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("operative_id");

                    b.Property<DateTime?>("ReportSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("report_sent_at");

                    b.Property<decimal>("Utilisation")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)")
                        .HasDefaultValue(1m)
                        .HasColumnName("utilisation");

                    b.Property<string>("WeekId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("week_id");

                    b.HasKey("Id")
                        .HasName("pk_timesheets");

                    b.HasIndex("WeekId")
                        .HasDatabaseName("ix_timesheets_week_id");

                    b.HasIndex("OperativeId", "WeekId")
                        .IsUnique()
                        .HasDatabaseName("ix_timesheets_operative_id_week_id");

                    b.ToTable("timesheets", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Trade", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_trades");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasDatabaseName("ix_trades_description");

                    b.ToTable("trades", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Week", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("id");

                    b.Property<string>("BonusPeriodId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("bonus_period_id");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("closed_by");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<DateTime?>("ReportsSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reports_sent_at");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.HasKey("Id")
                        .HasName("pk_weeks");

                    b.HasIndex("BonusPeriodId", "Number")
                        .IsUnique()
                        .HasDatabaseName("ix_weeks_bonus_period_id_number");

                    b.ToTable("weeks", (string)null);
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.WeeklySummary", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(28)
                        .HasColumnType("character varying(28)")
                        .HasColumnName("id");

                    b.Property<decimal>("AverageUtilisation")
                        .HasColumnType("numeric")
                        .HasColumnName("average_utilisation");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<decimal>("NonProductiveDuration")
                        .HasColumnType("numeric")
                        .HasColumnName("non_productive_duration");

                    b.Property<decimal>("NonProductiveValue")
                        .HasColumnType("numeric")
                        .HasColumnName("non_productive_value");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("OperativeId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("operative_id");

                    b.Property<decimal>("ProductiveValue")
                        .HasColumnType("numeric")
                        .HasColumnName("productive_value");

                    b.Property<decimal>("ProjectedValue")
                        .HasColumnType("numeric")
                        .HasColumnName("projected_value");

                    b.Property<DateTime?>("ReportSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("report_sent_at");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<string>("SummaryId")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("summary_id");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric")
                        .HasColumnName("total_value");

                    b.Property<decimal>("Utilisation")
                        .HasColumnType("numeric")
                        .HasColumnName("utilisation");

                    b.Property<string>("WeekId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("week_id");

                    b.HasKey("Id")
                        .HasName("pk_weekly_summaries");

                    b.HasIndex("OperativeId")
                        .HasDatabaseName("ix_weekly_summaries_operative_id");

                    b.HasIndex("SummaryId")
                        .HasDatabaseName("ix_weekly_summaries_summary_id");

                    b.ToTable((string)null);

                    b.ToView("weekly_summaries");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.WorkElement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("OperativeId")
                        .HasColumnType("text")
                        .HasColumnName("operative_id");

                    b.Property<string>("OperativeName")
                        .HasColumnType("text")
                        .HasColumnName("operative_name");

                    b.Property<int>("PayElementTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("pay_element_type_id");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.Property<string>("WeekId")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("week_id");

                    b.Property<string>("WorkOrder")
                        .HasColumnType("text")
                        .HasColumnName("work_order");

                    b.HasKey("Id")
                        .HasName("pk_work_elements");

                    b.HasIndex("PayElementTypeId")
                        .HasDatabaseName("ix_work_elements_pay_element_type_id");

                    b.HasIndex("WeekId")
                        .HasDatabaseName("ix_work_elements_week_id");

                    b.ToTable((string)null);

                    b.ToView("work_elements");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.BandChange", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.BonusPeriod", "BonusPeriod")
                        .WithMany("BandChanges")
                        .HasForeignKey("BonusPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_band_changes_bonus_periods_bonus_period_id");

                    b.HasOne("BonusCalcApi.V1.Infrastructure.Operative", "Operative")
                        .WithMany()
                        .HasForeignKey("OperativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_band_changes_operatives_operative_id");

                    b.OwnsOne("BonusCalcApi.V1.Infrastructure.BandChangeApprover", "Manager", b1 =>
                        {
                            b1.Property<string>("BandChangeId")
                                .HasColumnType("character varying(17)")
                                .HasColumnName("id");

                            b1.Property<BandChangeDecision?>("Decision")
                                .HasColumnType("band_change_decision")
                                .HasColumnName("manager_decision");

                            b1.Property<string>("EmailAddress")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("manager_email_address");

                            b1.Property<string>("Name")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("manager_name");

                            b1.Property<string>("Reason")
                                .HasColumnType("text")
                                .HasColumnName("manager_reason");

                            b1.Property<int?>("SalaryBand")
                                .HasColumnType("integer")
                                .HasColumnName("manager_salary_band");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("manager_updated_at");

                            b1.HasKey("BandChangeId");

                            b1.ToTable("band_changes");

                            b1.WithOwner()
                                .HasForeignKey("BandChangeId")
                                .HasConstraintName("fk_band_changes_band_changes_id");
                        });

                    b.OwnsOne("BonusCalcApi.V1.Infrastructure.BandChangeApprover", "Supervisor", b1 =>
                        {
                            b1.Property<string>("BandChangeId")
                                .HasColumnType("character varying(17)")
                                .HasColumnName("id");

                            b1.Property<BandChangeDecision?>("Decision")
                                .HasColumnType("band_change_decision")
                                .HasColumnName("supervisor_decision");

                            b1.Property<string>("EmailAddress")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("supervisor_email_address");

                            b1.Property<string>("Name")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("supervisor_name");

                            b1.Property<string>("Reason")
                                .HasColumnType("text")
                                .HasColumnName("supervisor_reason");

                            b1.Property<int?>("SalaryBand")
                                .HasColumnType("integer")
                                .HasColumnName("supervisor_salary_band");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("supervisor_updated_at");

                            b1.HasKey("BandChangeId");

                            b1.ToTable("band_changes");

                            b1.WithOwner()
                                .HasForeignKey("BandChangeId")
                                .HasConstraintName("fk_band_changes_band_changes_id");
                        });

                    b.Navigation("BonusPeriod");

                    b.Navigation("Manager")
                        .IsRequired();

                    b.Navigation("Operative");

                    b.Navigation("Supervisor")
                        .IsRequired();
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Operative", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("fk_operatives_people_manager_id");

                    b.HasOne("BonusCalcApi.V1.Infrastructure.Scheme", "Scheme")
                        .WithMany("Operatives")
                        .HasForeignKey("SchemeId")
                        .HasConstraintName("fk_operatives_schemes_scheme_id");

                    b.HasOne("BonusCalcApi.V1.Infrastructure.Person", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .HasConstraintName("fk_operatives_people_supervisor_id");

                    b.HasOne("BonusCalcApi.V1.Infrastructure.Trade", "Trade")
                        .WithMany("Operatives")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_operatives_trades_trade_id");

                    b.Navigation("Manager");

                    b.Navigation("Scheme");

                    b.Navigation("Supervisor");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.OperativeProjection", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.BonusPeriod", "BonusPeriod")
                        .WithMany()
                        .HasForeignKey("BonusPeriodId")
                        .HasConstraintName("fk_operative_projections_bonus_periods_bonus_period_id");

                    b.HasOne("BonusCalcApi.V1.Infrastructure.Operative", "Operative")
                        .WithMany()
                        .HasForeignKey("OperativeId")
                        .HasConstraintName("fk_operative_projections_operatives_operative_id");

                    b.Navigation("BonusPeriod");

                    b.Navigation("Operative");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.OperativeSummary", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.Week", null)
                        .WithMany("OperativeSummaries")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_operative_summaries_weeks_week_id");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.PayBand", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.Scheme", "Scheme")
                        .WithMany("PayBands")
                        .HasForeignKey("SchemeId")
                        .HasConstraintName("fk_pay_bands_schemes_scheme_id");

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.PayElement", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.PayElementType", "PayElementType")
                        .WithMany("PayElements")
                        .HasForeignKey("PayElementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pay_elements_pay_element_types_pay_element_type_id");

                    b.HasOne("BonusCalcApi.V1.Infrastructure.Timesheet", "Timesheet")
                        .WithMany("PayElements")
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pay_elements_timesheets_timesheet_id");

                    b.Navigation("PayElementType");

                    b.Navigation("Timesheet");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Summary", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.BonusPeriod", "BonusPeriod")
                        .WithMany()
                        .HasForeignKey("BonusPeriodId")
                        .HasConstraintName("fk_summaries_bonus_periods_bonus_period_id");

                    b.Navigation("BonusPeriod");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Timesheet", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.Operative", "Operative")
                        .WithMany("Timesheets")
                        .HasForeignKey("OperativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_timesheets_operatives_operative_id");

                    b.HasOne("BonusCalcApi.V1.Infrastructure.Week", "Week")
                        .WithMany("Timesheets")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_timesheets_weeks_week_id");

                    b.Navigation("Operative");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Week", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.BonusPeriod", "BonusPeriod")
                        .WithMany("Weeks")
                        .HasForeignKey("BonusPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weeks_bonus_periods_bonus_period_id");

                    b.Navigation("BonusPeriod");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.WeeklySummary", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.Operative", null)
                        .WithMany("WeeklySummaries")
                        .HasForeignKey("OperativeId")
                        .HasConstraintName("fk_weekly_summaries_operatives_operative_id");

                    b.HasOne("BonusCalcApi.V1.Infrastructure.BandChange", null)
                        .WithMany("WeeklySummaries")
                        .HasForeignKey("SummaryId")
                        .HasConstraintName("fk_weekly_summaries_band_changes_band_change_id");

                    b.HasOne("BonusCalcApi.V1.Infrastructure.Summary", null)
                        .WithMany("WeeklySummaries")
                        .HasForeignKey("SummaryId")
                        .HasConstraintName("fk_weekly_summaries_summaries_summary_id");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.WorkElement", b =>
                {
                    b.HasOne("BonusCalcApi.V1.Infrastructure.PayElementType", "PayElementType")
                        .WithMany()
                        .HasForeignKey("PayElementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_work_elements_pay_element_types_pay_element_type_id");

                    b.HasOne("BonusCalcApi.V1.Infrastructure.Week", "Week")
                        .WithMany()
                        .HasForeignKey("WeekId")
                        .HasConstraintName("fk_work_elements_weeks_week_id");

                    b.Navigation("PayElementType");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.BandChange", b =>
                {
                    b.Navigation("WeeklySummaries");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.BonusPeriod", b =>
                {
                    b.Navigation("BandChanges");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Operative", b =>
                {
                    b.Navigation("Timesheets");

                    b.Navigation("WeeklySummaries");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.PayElementType", b =>
                {
                    b.Navigation("PayElements");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Scheme", b =>
                {
                    b.Navigation("Operatives");

                    b.Navigation("PayBands");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Summary", b =>
                {
                    b.Navigation("WeeklySummaries");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Timesheet", b =>
                {
                    b.Navigation("PayElements");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Trade", b =>
                {
                    b.Navigation("Operatives");
                });

            modelBuilder.Entity("BonusCalcApi.V1.Infrastructure.Week", b =>
                {
                    b.Navigation("OperativeSummaries");

                    b.Navigation("Timesheets");
                });
#pragma warning restore 612, 618
        }
    }
}
